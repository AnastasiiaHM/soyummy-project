{"version":3,"file":"static/js/866.9449309b.chunk.js","mappings":"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","sources":["components/RecipesGallery/RecipeCard/RecipeCardStyled.jsx","components/RecipesGallery/RecipeCard/RecipeCard.jsx","components/Styled/MainPageHome.styled.jsx","components/WelcomeSearch/WelcomeSearch.styled.jsx","components/WelcomeSearch/WelcomeSearch.jsx","components/MainGallery/MainGallery.styled.jsx","components/MainGallery/MainGallery.jsx","pages/Home.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { mediaSizes } from '../../constants/media';\nimport { colors } from 'components/colors';\nimport { NavLink } from 'react-router-dom';\n\nexport const RecipeCardStyled = styled.li`\n  position: relative;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  max-width: 343px;\n  margin: 0;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    max-width: 336px;\n  }\n\n  @media screen and (min-width: ${mediaSizes.desktop}) {\n    max-width: 300px;\n  }\n\n  .image {\n    object-fit: cover;\n    -webkit-transform: scale(1.2);\n    transform: scale(1.2);\n    -webkit-transition: 0.3s ease-in-out;\n    transition: 0.3s ease-in-out;\n    &:hover {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n      cursor: pointer;\n    }\n  }\n  /* 11 */\n  .name {\n    position: absolute;\n    bottom: 26px;\n    left: 18px;\n    background: ${colors.whiteColor};\n    border-radius: 8px;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 20px;\n    letter-spacing: -0.24px;\n    color: ${colors.recipeCardText};\n    padding: 16px 16px;\n    width: 268px;\n\n    @media screen and (min-width: ${mediaSizes.desktop}) {\n      bottom: 24px;\n      left: 16px;\n    }\n  }\n`;\nexport const StyledLink = styled(NavLink)`\n  display: flex;\n  width: 100%;\n  gap: 12px;\n`;\n","import React from 'react';\nimport { RecipeCardStyled, StyledLink } from './RecipeCardStyled';\n\nexport const RecipeCard = ({ recipe, location }) => {\n  const uppPageHandler = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n  return (\n    <RecipeCardStyled onClick={uppPageHandler}>\n      <StyledLink to={`/recipe/${recipe._id}`} state={{ from: location }}>\n        <img className=\"image\" src={recipe.preview} alt=\"dish-card\" />\n        <p className=\"name\">{recipe.title}</p>\n      </StyledLink>\n    </RecipeCardStyled>\n  );\n};\n","import styled from '@emotion/styled';\nimport { mediaSizes } from '../constants/media';\nimport salat from '../../components/images/header/salat/salat-header-desc-1x.png';\nimport spinachLeft from 'components/images/spinach/left.png';\nimport spinachRight from 'components/images/spinach/right.png';\nimport bg from 'components/images/spinach/bg2.png';\nimport bgDesc from 'components/images/spinach/bg2desk.png';\nimport arrow from 'components/images/spinach/arrow.png';\nimport { colors } from 'components/colors';\n\nexport const Section = styled.section`\n  background-image: url(${salat}), url(${arrow}), url(${spinachRight}),\n    url(${spinachLeft}), url(${bg});\n  background-size: 328px auto, 10px auto, 720px auto, 15% auto;\n  background-position: top 238px center, center, top 68px right -130px, left top,\n    right top -150px;\n  background-repeat: no-repeat;\n  width: 100vw;\n  padding: 132px 36px 100px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    padding: 204px 32px 100px;\n\n    background-size: 378px auto, 157px auto, 900px auto, 10% auto, 353px auto;\n    background-position: top 82px right, top 385px right 82px,\n      top -178px right -280px, left -25px top -10px, right top -170px;\n    background-repeat: no-repeat;\n  }\n\n  @media screen and (min-width: 1000px) {\n    background-size: 40% auto, 20% auto, 900px auto, 10% auto, 353px auto;\n    background-position: top 42px right, top 385px right 82px,\n      top -178px right -280px, left -25px top -10px, right top -170px;\n  }\n\n  @media screen and (min-width: ${mediaSizes.desktop}) {\n    padding: 226px 99px 100px;\n\n    background-image: url(${salat}), url(${arrow}), url(${spinachRight}),\n      url(${spinachLeft}), url(${bgDesc});\n    background-size: 578px auto, 190px auto, 1100px auto, 9% auto, 753px auto;\n    background-position: top 82px right 230px, top 500px right 210px,\n      top -228px right -120px, left -25px top -10px, right top -50px;\n    background-repeat: no-repeat;\n  }\n\n  & .wrapper {\n    width: 303px;\n    margin: 0 auto;\n    position: relative;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      width: 700px;\n    }\n\n    @media screen and (min-width: ${mediaSizes.desktop}) {\n      width: 1100px;\n    }\n  }\n\n  & .main {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      align-items: start;\n    }\n\n    & h1 {\n      font-weight: 400;\n      font-size: 60px;\n      line-height: 60px;\n      letter-spacing: -0.005em;\n      color: ${colors.darkButton};\n      margin-bottom: 14px;\n\n      @media screen and (min-width: ${mediaSizes.tablet}) {\n        font-size: 72px;\n        line-height: 72px;\n        margin-bottom: 24px;\n      }\n\n      @media screen and (min-width: ${mediaSizes.desktop}) {\n        font-size: 100px;\n        line-height: 100px;\n        margin-bottom: 14px;\n      }\n\n      & span {\n        color: ${colors.greenButton};\n      }\n    }\n\n    & p {\n      width: 228px;\n      text-align: center;\n      font-size: 14px;\n      line-height: 18px;\n      letter-spacing: -0.02em;\n      color: ${colors.blackFont};\n      margin-bottom: 364px;\n\n      @media screen and (min-width: ${mediaSizes.tablet}) {\n        width: 362px;\n        text-align: start;\n        margin-left: 6px;\n        margin-bottom: 32px;\n      }\n\n      @media screen and (min-width: ${mediaSizes.desktop}) {\n        font-size: 18px;\n        line-height: 24px;\n        width: 465px;\n        margin-bottom: 50px;\n      }\n    }\n  }\n\n  & .tips {\n    position: absolute;\n    width: 225px;\n    height: 92px;\n    right: 0;\n    top: 303px;\n    padding: 8px;\n\n    background: ${colors.textGreenBtn};\n    border-radius: 8px;\n    color: ${colors.recipeCardText};\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      width: 261px;\n      height: 100px;\n      top: 168px;\n      right: 8px;\n      padding: 12px;\n    }\n\n    @media screen and (min-width: ${mediaSizes.desktop}) {\n      padding: 16px;\n      width: 298px;\n      height: 114px;\n      top: 236px;\n    }\n\n    & p {\n      font-weight: 500;\n      font-size: 12px;\n      line-height: 18px;\n      letter-spacing: -0.24px;\n      margin-bottom: 4px;\n\n      @media screen and (min-width: ${mediaSizes.tablet}) {\n        font-size: 14px;\n        line-height: 18px;\n      }\n\n      @media screen and (min-width: ${mediaSizes.desktop}) {\n        font-size: 14px;\n        line-height: 20px;\n        width: 230px;\n      }\n\n      & span {\n        color: ${colors.greenButton};\n      }\n    }\n\n    & .link {\n      display: flex;\n      gap: 4px;\n      align-items: center;\n      margin-left: 128px;\n\n      &:hover {\n        transition: all 200ms ease-in-out;\n        cursor: pointer;\n        opacity: 0.7;\n      }\n\n      @media screen and (min-width: ${mediaSizes.tablet}) {\n        margin-left: 150px;\n      }\n\n      @media screen and (min-width: ${mediaSizes.desktop}) {\n        font-size: 14px;\n        line-height: 20px;\n        width: 250px;\n        margin-left: 184px;\n      }\n    }\n\n    & a {\n      font-weight: 400;\n      font-size: 10px;\n      line-height: 12px;\n      letter-spacing: 0.2px;\n\n      color: ${colors.recipeCardText};\n    }\n\n    & svg {\n      fill: ${colors.recipeCardText};\n      width: 18px;\n      height: 18px;\n    }\n  }\n`;\n","import styled from '@emotion/styled';\nimport { mediaSizes } from '../constants/media';\nimport { colors } from '../colors';\n\nexport const FormikWrapper = styled.div`\n  & form {\n    position: relative;\n  }\n\n  input {\n    width: 295px;\n    background: ${colors.textGreenBtn};\n    border: 1px solid ${colors.border};\n    outline: none;\n    border-radius: 15px 50px;\n    padding-top: 17px;\n    padding-right: 113px;\n    padding-bottom: 17px;\n    padding-left: 32px;\n    margin-bottom: 8px;\n    ::placeholder {\n      color: ${colors.placeholder};\n    }\n\n    &:not(:placeholder-shown) {\n      font-weight: 500;\n      font-size: 12px;\n      line-height: 1.6;\n      color: ${colors.placeholder};\n\n      @media screen and (min-width: ${mediaSizes.tablet}) {\n        font-size: 16px;\n      }\n    }\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      width: 362px;\n      height: 57px;\n    }\n\n    @media screen and (min-width: ${mediaSizes.desktop}) {\n      width: 510px;\n      height: 70px;\n    }\n  }\n\n  & button {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 113px;\n    border: none;\n    border-radius: 0 5px 5px 0;\n    cursor: pointer;\n    color: ${colors.whiteColor};\n    font-weight: bold;\n    background: ${colors.darkButton};\n    height: 54px;\n    border-radius: 15px 50px;\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 1.5;\n    color: ${colors.textGreenBtn};\n    transition: 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover {\n      background-color: ${colors.greenButton};\n    }\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      height: 56px;\n      width: 161px;\n    }\n\n    @media screen and (min-width: ${mediaSizes.desktop}) {\n      height: 70px;\n    }\n  }\n\n  & div {\n    position: absolute;\n    left: 32px;\n    font-size: 12px;\n    line-height: 21px;\n    color: #e74a3b;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      font-size: 14px;\n    }\n  }\n`;\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { FormikWrapper } from './WelcomeSearch.styled';\nimport { useNavigate } from 'react-router-dom';\n\nexport const WelcomeSearch = () => {\n  const initialValues = {\n    query: '',\n  };\n\n  const validationSchema = Yup.object().shape({\n    query: Yup.string()\n      .min(3)\n      .max(20)\n      .matches(\n        /^[a-zA-Z'-\\s]+$/,\n        'Name may contain only letters, apostrophe, dash, and spaces.'\n      )\n      .required(),\n  });\n\n  const navigate = useNavigate();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { query } = values;\n    const url = `/search?query=${encodeURIComponent(query)}`;\n    navigate(url);\n    resetForm();\n  };\n\n  return (\n    <FormikWrapper>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched, isSubmitting, submitCount }) => {\n          const hasQueryError =\n            submitCount > 0 && touched.query && errors.query;\n          return (\n            <Form>\n              <Field type=\"text\" name=\"query\" placeholder=\"Search..\" />\n              {hasQueryError && <ErrorMessage name=\"query\" component=\"div\" />}\n              <button type=\"submit\">Search</button>\n            </Form>\n          );\n        }}\n      </Formik>\n    </FormikWrapper>\n  );\n};\n","import styled from '@emotion/styled';\nimport { mediaSizes } from '../constants/media';\nimport { colors } from '../colors';\nimport { Link } from 'react-router-dom';\n\nexport const HomeGallery = styled.div`\n  padding-top: 150px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    /* padding-bottom: 40px; */\n  }\n\n  @media screen and (min-width: ${mediaSizes.desktop}) {\n    max-width: 1440px;\n  }\n`;\n\nexport const MainGalleryStyled = styled.ul`\n  display: flex;\n  gap: 28px;\n  justify-items: center;\n  justify-content: center;\n  padding-top: 32px;\n  padding-bottom: 24px;\n  flex-wrap: wrap;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    gap: 32px;\n    padding-top: 40px;\n    padding-bottom: 40px;\n  }\n\n  @media screen and (min-width: ${mediaSizes.desktop}) {\n    padding-top: 50px;\n    padding-bottom: 50px;\n    grid-column-gap: 14px;\n    grid-row-gap: 100px;\n  }\n`;\n\nexport const MainBtn = styled.button`\n  align-self: flex-end;\n  background-color: ${colors.greenButton};\n  border-radius: 6px;\n  border: 0;\n  width: 94px;\n  height: 38px;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 18px;\n  color: ${colors.textGreenBtn};\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background-color: ${colors.darkButton};\n  }\n`;\nexport const StyledLink = styled(Link)`\n  width: 94px;\n  height: 38px;\n  align-self: flex-end;\n`;\nexport const StyledTitle = styled.h1`\n  color: ${colors.titleColor};\n  font-family: inherit;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 44px;\n  line-height: 44px;\n  align-self: flex-start;\n`;\nexport const StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const DownBtn = styled.button`\n  width: 137px;\n  height: 49px;\n  background: ${colors.greenButton};\n  border: none;\n  border-radius: 14px 6px;\n\n  padding: 0;\n  margin: 0;\n  cursor: pointer;\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    width: 192px;\n    height: 59px;\n  }\n  @media screen and (min-width: ${mediaSizes.desktop}) {\n    width: 192px;\n    height: 59px;\n  }\n`;\n","import { MainGalleryStyled } from './MainGallery.styled';\nimport { RecipeCard } from '../RecipesGallery/RecipeCard/RecipeCard';\nimport { useMediaQuery } from 'react-responsive';\n\nexport const MainGallery = ({ recipes }) => {\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1439px)' });\n  const isMobile = useMediaQuery({ query: '(max-width: 767px)' });\n\n  let itemsPerPage = 4;\n\n  if (isTabletOrMobile) {\n    itemsPerPage = isMobile ? 1 : 2;\n  }\n  const slicedItems = recipes?.slice(0, itemsPerPage);\n\n  return (\n    <>\n      <MainGalleryStyled>\n        {slicedItems?.map(recipe => (\n          <RecipeCard key={recipe._id} recipe={recipe} />\n        ))}\n      </MainGalleryStyled>\n    </>\n  );\n};\n\nexport default MainGallery;\n","import { Link, useLocation } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Section } from '../components/Styled/MainPageHome.styled';\nimport { WelcomeSearch } from '../components/WelcomeSearch/WelcomeSearch';\nimport { fetchMainPageRecipes } from '../redux/main/operations';\nimport { BsArrowRight } from 'react-icons/bs';\nimport MainGallery from '../components/MainGallery/MainGallery';\nimport {\n  MainBtn,\n  HomeGallery,\n  StyledTitle,\n  StyledLink,\n  StyledDiv,\n} from '../components/MainGallery/MainGallery.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function MainPageHome() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchMainPageRecipes());\n  }, [dispatch]);\n\n  const recipes = useSelector(state => state.mainPage.recipes);\n\n  return (\n    <Section>\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <h1>\n            <span>So</span>Yummy\n          </h1>\n          <p>\n            \"What to cook?\" is not only a recipe app, it is, in fact, your\n            cookbook. You can add your own recipes to save them for the future.\n          </p>\n          <WelcomeSearch />\n        </div>\n        <div className=\"tips\">\n          <p>\n            <span>Delicious and healthy </span>\n            way to enjoy a variety of fresh ingredients in one satisfying meal\n          </p>\n          <div className=\"link\">\n            <Link to={`/categories`} state={{ from: location }}>\n              See recipes\n            </Link>\n            <BsArrowRight />\n          </div>\n        </div>\n      </div>\n      {!recipes ? (\n        <Loader />\n      ) : (\n        <HomeGallery>\n          {Object.entries(recipes).map(([recipeKey, recipeArray]) => (\n            <StyledDiv key={recipeKey}>\n              <StyledTitle>{recipeKey}</StyledTitle>\n              <MainGallery recipes={recipeArray} />\n              <StyledLink\n                to={`/categories/${recipeKey}`}\n                state={{ from: location }}\n              >\n                <MainBtn>See all</MainBtn>\n              </StyledLink>\n            </StyledDiv>\n          ))}\n          <Link to={`/categories`} state={{ from: location }}>\n            <button className=\"btn recipesbtn\">Other Categories</button>\n          </Link>\n        </HomeGallery>\n      )}\n    </Section>\n  );\n}\n"],"names":["RecipeCardStyled","styled","mediaSizes","colors","StyledLink","NavLink","RecipeCard","recipe","location","onClick","window","scrollTo","top","behavior","to","_id","state","from","className","src","preview","alt","title","Section","salat","arrow","spinachRight","spinachLeft","FormikWrapper","WelcomeSearch","validationSchema","Yup","shape","query","min","max","matches","required","navigate","useNavigate","initialValues","onSubmit","values","resetForm","url","encodeURIComponent","errors","touched","hasQueryError","isSubmitting","submitCount","type","name","placeholder","component","HomeGallery","MainGalleryStyled","MainBtn","Link","StyledTitle","StyledDiv","recipes","isTabletOrMobile","useMediaQuery","isMobile","itemsPerPage","slicedItems","slice","map","MainPageHome","useLocation","dispatch","useDispatch","useEffect","fetchMainPageRecipes","useSelector","mainPage","Object","entries","recipeKey","recipeArray","Loader"],"sourceRoot":""}