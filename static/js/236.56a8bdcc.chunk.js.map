{"version":3,"file":"static/js/236.56a8bdcc.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import {\n  FormFields,\n  RegisterFormStyled,\n  Caption,\n  InputWraper,\n} from './RegisterForm.styled';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { BiUser } from 'react-icons/bi';\nimport { HiOutlineMail, HiOutlineLockClosed } from 'react-icons/hi';\nimport { AiFillCloseCircle, AiFillCheckCircle } from 'react-icons/ai';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from '../../redux/auth/operations';\nimport Message from 'components/Message/Message';\nimport { selectAuthError } from 'redux/auth/selectors';\nimport { emailPattern, passwordPattern } from 'components/patterns';\nimport { useEffect } from 'react';\nimport { setAuthError } from 'redux/auth/slice';\n\nexport const RegisterForm = () => {\n  const initialValues = { name: '', email: '', password: '' };\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n  };\n  useEffect(() => {\n    dispatch(setAuthError(null));\n  }, [dispatch]);\n\n  const schema = yup.object().shape({\n    name: yup.string().min(1).max(16).required(),\n    email: yup\n      .string()\n      .email()\n      .matches(emailPattern, 'email must be valid')\n      .min(3)\n      .max(30)\n      .required(),\n    password: yup\n      .string()\n      .min(6)\n      .max(16)\n      .matches(passwordPattern, 'the password must contain letters and numbers')\n      .required(),\n  });\n\n  const message = useSelector(selectAuthError);\n\n  return (\n    <RegisterFormStyled>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched, isSubmitting, submitCount }) => {\n          const hasNameError = submitCount > 0 && touched.name && errors.name;\n          const hasEmailError =\n            submitCount > 0 && touched.email && errors.email;\n          const hasPasswordError =\n            submitCount > 0 && touched.password && errors.password;\n          const isFormSubmitted = submitCount > 0;\n\n          return (\n            <Form autoComplete=\"off\">\n              <Caption>Registration</Caption>\n              <FormFields>\n                <InputWraper>\n                  <BiUser\n                    className={`icon ${\n                      touched.name &&\n                      (hasNameError\n                        ? 'error-icon'\n                        : isFormSubmitted\n                        ? 'success-icon'\n                        : '')\n                    }`}\n                  />\n                  {hasNameError && <AiFillCloseCircle className=\"invalid\" />}\n                  {!hasNameError && isFormSubmitted && touched.name && (\n                    <AiFillCheckCircle className=\"valid\" />\n                  )}\n                  <Field\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    autoComplete=\"off\"\n                    className={`${\n                      touched.name &&\n                      (hasNameError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {hasNameError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"name\"\n                    />\n                  )}\n                </InputWraper>\n\n                <InputWraper>\n                  <HiOutlineMail\n                    className={`${\n                      touched.email &&\n                      (hasEmailError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {hasEmailError && <AiFillCloseCircle className=\"invalid\" />}\n                  {!hasEmailError && isFormSubmitted && touched.email && (\n                    <AiFillCheckCircle className=\"valid\" />\n                  )}\n                  <Field\n                    type=\"text\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    autoComplete=\"off\"\n                    className={`input-field ${\n                      touched.email &&\n                      (hasEmailError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {hasEmailError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"email\"\n                    />\n                  )}\n                </InputWraper>\n\n                <InputWraper>\n                  {hasPasswordError && (\n                    <AiFillCloseCircle className=\"invalid\" />\n                  )}\n                  {!hasPasswordError &&\n                    isFormSubmitted &&\n                    touched.password &&\n                    !isSubmitting && <AiFillCheckCircle className=\"valid\" />}\n                  <HiOutlineLockClosed\n                    className={`${\n                      touched.password &&\n                      (hasPasswordError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  <Field\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    autoComplete=\"off\"\n                    className={`input-field ${\n                      touched.password &&\n                      (hasPasswordError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {touched.password && !hasPasswordError && isFormSubmitted && (\n                    <div className=\"success-message\">Password is secure</div>\n                  )}\n                  {hasPasswordError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"password\"\n                    />\n                  )}\n                </InputWraper>\n              </FormFields>\n              <button type=\"submit\">Sign up</button>\n            </Form>\n          );\n        }}\n      </Formik>\n      {message && <Message>{message}</Message>}\n    </RegisterFormStyled>\n  );\n};\n\nexport default RegisterForm;\n","import { Link } from 'react-router-dom';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport RegisterWrapper from 'components/Styled/Register.styled.jsx';\nimport { Motivation } from 'components/motivation/Motivation';\nimport { useSelector } from 'react-redux';\n\nconst Register = () => {\n  const isOpen=useSelector(state=>state.auth.isOpen)\n  return (\n    <RegisterWrapper>\n      {isOpen&&<Motivation/>}\n      <div className=\"wrapper\">\n        <RegisterForm />\n        <Link to={`/signin`}>Sign in</Link>\n      </div>\n    </RegisterWrapper>\n  );\n};\n\nexport default Register;\n"],"names":["dispatch","useDispatch","useEffect","setAuthError","schema","yup","shape","name","min","max","required","email","matches","emailPattern","password","passwordPattern","message","useSelector","selectAuthError","initialValues","validationSchema","onSubmit","values","resetForm","register","errors","touched","isSubmitting","submitCount","hasNameError","hasEmailError","hasPasswordError","isFormSubmitted","autoComplete","className","type","placeholder","component","Message","isOpen","state","auth","Motivation","to"],"sourceRoot":""}