{"version":3,"file":"static/js/504.aa764f7c.chunk.js","mappings":"0LAGaA,EAAgBC,EAAAA,EAAAA,IAAH,uGACfC,EAAAA,EAAAA,O,SCMX,EARgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,OACE,SAACH,EAAD,WACE,yBAAIG,EAAJ,SAGL,C,mLCJYC,EAAqBH,EAAAA,EAAAA,IAAH,4qBACTC,EAAAA,EAAAA,YAOYG,EAAAA,EAAAA,OAUVH,EAAAA,EAAAA,YAIXA,EAAAA,EAAAA,aAKEA,EAAAA,EAAAA,WAGqBG,EAAAA,EAAAA,QAMvBC,EAAUL,EAAAA,EAAAA,EAAH,sPAKTC,EAAAA,EAAAA,aAGuBG,EAAAA,EAAAA,QAMrBE,EAAaN,EAAAA,EAAAA,IAAH,mLAMWI,EAAAA,EAAAA,QAKrBG,EAAcP,EAAAA,EAAAA,IAAH,uvEAOVC,EAAAA,EAAAA,aAOEA,EAAAA,EAAAA,MAKAA,EAAAA,EAAAA,QAKFA,EAAAA,EAAAA,aAGEA,EAAAA,EAAAA,MAKAA,EAAAA,EAAAA,QAKoBG,EAAAA,EAAAA,OAaAA,EAAAA,EAAAA,OAKrBH,EAAAA,EAAAA,MAIAA,EAAAA,EAAAA,QAWFA,EAAAA,EAAAA,aAUaA,EAAAA,EAAAA,WAIAA,EAAAA,EAAAA,MAKAA,EAAAA,EAAAA,QAGUG,EAAAA,EAAAA,OAQrBH,EAAAA,EAAAA,aAMAA,EAAAA,EAAAA,WAMCA,EAAAA,EAAAA,WACFA,EAAAA,EAAAA,WACCA,EAAAA,EAAAA,WACOA,EAAAA,EAAAA,WASVA,EAAAA,EAAAA,MAMwBG,EAAAA,EAAAA,OASxBH,EAAAA,EAAAA,Q,qNC3IZ,EAxDwBD,EAAAA,EAAAA,IAAH,stCAGCC,EAAAA,EAAAA,aACIO,E,imHAWQJ,EAAAA,EAAAA,OAOAA,EAAAA,EAAAA,QACNK,E,yoKAaQL,EAAAA,EAAAA,QAOvBH,EAAAA,EAAAA,a,8ECpDN,IAAMS,EAAe,mDACfC,EAAkB,0C,yMCiM/B,EAjL4B,WAC1B,IAEMC,GAAWC,EAAAA,EAAAA,MAMXC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAAIC,WAClCC,MAAON,EAAAA,KAEJM,QACAC,QAAQZ,EAAAA,EAAc,uBACtBQ,IAAI,GACJC,IAAI,IACJC,WACHG,SAAUR,EAAAA,KAEPG,IAAI,GACJC,IAAI,IACJG,QAAQX,EAAAA,EAAiB,iDACzBS,aAGCI,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,GAE5B,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,cA9BgB,CAAEV,KAAM,GAAII,MAAO,GAAIE,SAAU,IA+BjDK,iBAAkBd,EAClBe,SA5Be,SAACC,EAAD,GAA2B,EAAhBC,UAC9BnB,GAASoB,EAAAA,EAAAA,IAASF,GACnB,EAuBG,SAKG,YAAqD,IAAlDG,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAC3BC,EAAeD,EAAc,GAAKF,EAAQjB,MAAQgB,EAAOhB,KACzDqB,EACJF,EAAc,GAAKF,EAAQb,OAASY,EAAOZ,MACvCkB,EACJH,EAAc,GAAKF,EAAQX,UAAYU,EAAOV,SAC1CiB,EAAkBJ,EAAc,EAEtC,OACE,UAAC,KAAD,CAAMK,aAAa,MAAnB,WACE,SAAC,KAAD,4BACA,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,MAAD,CACEC,UAAS,eACPR,EAAQjB,OACPoB,EACG,aACAG,EACA,eACA,OAGPH,IAAgB,SAAC,MAAD,CAAmBK,UAAU,aAC5CL,GAAgBG,GAAmBN,EAAQjB,OAC3C,SAAC,MAAD,CAAmByB,UAAU,WAE/B,SAAC,KAAD,CACEC,KAAK,OACL1B,KAAK,OACL2B,YAAY,OACZH,aAAa,MACbC,UAAS,UACPR,EAAQjB,OACPoB,EACG,QACAG,EACA,UACA,OAGPH,IACC,SAAC,KAAD,CACEK,UAAU,QACVG,UAAU,MACV5B,KAAK,aAKX,UAAC,KAAD,YACE,SAAC,MAAD,CACEyB,UAAS,UACPR,EAAQb,QACPiB,EACG,QACAE,EACA,UACA,OAGPF,IAAiB,SAAC,MAAD,CAAmBI,UAAU,aAC7CJ,GAAiBE,GAAmBN,EAAQb,QAC5C,SAAC,MAAD,CAAmBqB,UAAU,WAE/B,SAAC,KAAD,CACEC,KAAK,OACL1B,KAAK,QACL2B,YAAY,QACZH,aAAa,MACbC,UAAS,sBACPR,EAAQb,QACPiB,EACG,QACAE,EACA,UACA,OAGPF,IACC,SAAC,KAAD,CACEI,UAAU,QACVG,UAAU,MACV5B,KAAK,cAKX,UAAC,KAAD,WACGsB,IACC,SAAC,MAAD,CAAmBG,UAAU,aAE7BH,GACAC,GACAN,EAAQX,WACPY,IAAgB,SAAC,MAAD,CAAmBO,UAAU,WAChD,SAAC,MAAD,CACEA,UAAS,UACPR,EAAQX,WACPgB,EACG,QACAC,EACA,UACA,QAGR,SAAC,KAAD,CACEG,KAAK,WACL1B,KAAK,WACL2B,YAAY,WACZH,aAAa,MACbC,UAAS,sBACPR,EAAQX,WACPgB,EACG,QACAC,EACA,UACA,OAGPN,EAAQX,WAAagB,GAAoBC,IACxC,gBAAKE,UAAU,kBAAf,gCAEDH,IACC,SAAC,KAAD,CACEG,UAAU,QACVG,UAAU,MACV5B,KAAK,oBAKb,mBAAQ0B,KAAK,SAAb,uBAGL,IAEFnB,IAAW,SAACsB,EAAA,EAAD,UAAUtB,MAG3B,E,UCjLD,EAXiB,WACf,OACE,SAAC,IAAD,WACE,iBAAKkB,UAAU,UAAf,WACE,SAAC,EAAD,KACA,SAAC,KAAD,CAAMK,GAAE,UAAR,yBAIP,C,uDCbM,IACMrB,EAAkB,SAAAsB,GAAK,OAAIA,EAAMC,KAAKC,SAAf,C","sources":["components/Message/Message.styled.jsx","components/Message/Message.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/Styled/Register.styled.jsx","components/patterns.js","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx","redux/auth/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { colors } from 'components/colors';\n\nexport const MessageStyled = styled.div`\n  color: ${colors.error};\n  position: absolute;\n  font-size: 14px;\n  line-height: 21px;\n`;\n","import { MessageStyled } from './Message.styled';\n\nconst Message = ({ children }) => {\n  return (\n    <MessageStyled>\n      <p>{children} *</p>\n    </MessageStyled>\n  );\n};\n\nexport default Message;\n","import styled from '@emotion/styled';\nimport { colors } from '../colors';\nimport { mediaSizes } from '../constants';\n\nexport const RegisterFormStyled = styled.div`\n  background-color: ${colors.registerBcg};\n  box-shadow: 0px 4px 48px rgba(0, 0, 0, 0.1);\n  border-radius: 30px;\n  padding: 32px 28px;\n  margin-bottom: 18px;\n  margin-inline: auto;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    padding: 44px 50px;\n    width: 500px;\n  }\n\n  & button {\n    cursor: pointer;\n    width: 100%;\n    font-size: 16px;\n    line-height: 18px;\n    background-color: ${colors.greenButton};\n    border-radius: 6px;\n    height: 45px;\n    border: none;\n    color: ${colors.textGreenBtn};\n    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n      color: ${colors.darkButton};\n    }\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      height: 59px;\n    }\n  }\n`;\n\nexport const Caption = styled.p`\n  font-size: 24px;\n  line-height: 28px;\n  font-weight: 600;\n  letter-spacing: -0.02em;\n  color: ${colors.textGreenBtn};\n  margin-bottom: 32px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    font-size: 28px;\n    line-height: 30px;\n  }\n`;\n\nexport const FormFields = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  margin-bottom: 28px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    margin-bottom: 50px;\n  }\n`;\n\nexport const InputWraper = styled.div`\n  width: 100%;\n  position: relative;\n\n  & svg {\n    width: 18px;\n    height: 18px;\n    stroke: ${colors.textGreenBtn};\n    opacity: 0.6;\n    position: absolute;\n    top: 13px;\n    left: 14px;\n\n    &.error {\n      stroke: ${colors.error};\n      opacity: 1;\n    }\n\n    &.success {\n      stroke: ${colors.success};\n      opacity: 1;\n    }\n\n    &.icon {\n      fill: ${colors.textGreenBtn};\n\n      &.error-icon {\n        fill: ${colors.error};\n        opacity: 1;\n      }\n\n      &.success-icon {\n        fill: ${colors.success};\n        opacity: 1;\n      }\n    }\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      width: 24px;\n      height: 24px;\n      top: 16px;\n      left: 18px;\n    }\n  }\n\n  & div {\n    position: absolute;\n    font-size: 12px;\n    line-height: 21px;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      font-size: 14px;\n    }\n\n    &.error {\n      color: ${colors.error};\n    }\n\n    &.success-message {\n      color: ${colors.success};\n    }\n  }\n\n  & input {\n    border: 1px solid rgba(250, 250, 250, 0.2);\n    border-radius: 6px;\n    width: 100%;\n    height: 100%;\n    background-color: transparent;\n    padding: 12px 40px;\n    color: ${colors.textGreenBtn};\n    opacity: 0.8;\n\n    font-size: 16px;\n    font-weight: 400;\n    line-height: 21px;\n    letter-spacing: -0.02em;\n    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:focus {\n      border: 1px solid ${colors.whiteColor};\n    }\n\n    &.error {\n      border: 1px solid ${colors.error};\n      opacity: 1;\n    }\n\n    &.success {\n      border: 1px solid ${colors.success};\n      opacity: 1;\n    }\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      font-size: 18px;\n      line-height: 27px;\n      padding: 16px 50px;\n    }\n\n    &::placeholder {\n      font-weight: 400;\n      color: ${colors.textGreenBtn};\n\n      opacity: 0.8;\n    }\n\n    &:focus::-webkit-input-placeholder {\n      color: ${colors.whiteColor};\n      opacity: 1;\n    }\n\n    &:hover,\n    placeholder {\n      stroke: ${colors.whiteColor};\n      fill: ${colors.whiteColor};\n      color: ${colors.whiteColor};\n      border-color: ${colors.whiteColor};\n      opacity: 1;\n    }\n  }\n\n  & .invalid,\n  .valid {\n    width: 18px;\n    height: 18px;\n    fill: ${colors.error};\n    opacity: 1;\n    position: absolute;\n    top: 13px;\n    left: 216px;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      width: 24px;\n      height: 24px;\n      top: 16px;\n      left: 360px;\n    }\n  }\n\n  & .valid {\n    fill: ${colors.success};\n  }\n`;\n","import styled from '@emotion/styled';\nimport ordering from 'components/images/login-register/ordering.png';\nimport orderingTab from 'components/images/login-register/orderingTab.png';\nimport rectangleMob from 'components/images/login-register/rectangle_mob1x.png';\n// import rectangleTab from 'components/images/login-register/rectangle_tab1x.png';\nimport rectangleDesk from 'components/images/login-register/rectangle_desc1x.png';\nimport { mediaSizes } from '../constants';\nimport { colors } from '../colors';\n\nconst RegisterWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${colors.textGreenBtn};\n  background-image: url(${orderingTab}), url(${rectangleMob});\n  background-repeat: no-repeat, no-repeat;\n  background-position: center 84px, center 282px;\n  background-size: 285px auto, cover;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-bottom: 100px;\n  padding-top: 305px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    background-position: center 98px, center 440px;\n    background-size: 409px auto, cover;\n\n    padding-top: 444px;\n  }\n\n  @media screen and (min-width: ${mediaSizes.desktop}) {\n    background-image: url(${ordering}), url(${rectangleDesk});\n    background-repeat: no-repeat, no-repeat;\n    background-position: 210px, center 400px;\n    background-size: 532px auto, cover;\n    padding-left: 760px;\n    height: 100vh;\n\n    display: flex;\n    flex-direction: column;\n    padding-block: 0;\n  }\n\n  & .wrapper {\n    @media screen and (min-width: ${mediaSizes.desktop}) {\n      margin-block: auto;\n    }\n  }\n\n  & a {\n    display: block;\n    color: ${colors.textGreenBtn};\n    font-size: 14px;\n    line-height: 21px;\n    text-decoration-line: underline;\n    text-align: center;\n    transition: all 200ms ease-in-out;\n\n    &:hover {\n      opacity: 0.7;\n    }\n  }\n`;\n\nexport default RegisterWrapper;\n","export const emailPattern = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/;\nexport const passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,16}$/;\n","import {\n  FormFields,\n  RegisterFormStyled,\n  Caption,\n  InputWraper,\n} from './RegisterForm.styled';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { BiUser } from 'react-icons/bi';\nimport { HiOutlineMail, HiOutlineLockClosed } from 'react-icons/hi';\nimport { AiFillCloseCircle, AiFillCheckCircle } from 'react-icons/ai';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from '../../redux/auth/operations';\nimport Message from 'components/Message/Message';\nimport { selectAuthError } from 'redux/auth/selectors';\nimport { emailPattern, passwordPattern } from 'components/patterns';\n\nexport const RegisterForm = () => {\n  const initialValues = { name: '', email: '', password: '' };\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n  };\n\n  const schema = yup.object().shape({\n    name: yup.string().min(1).max(16).required(),\n    email: yup\n      .string()\n      .email()\n      .matches(emailPattern, 'email must be valid')\n      .min(3)\n      .max(30)\n      .required(),\n    password: yup\n      .string()\n      .min(6)\n      .max(16)\n      .matches(passwordPattern, 'the password must contain letters and numbers')\n      .required(),\n  });\n\n  const message = useSelector(selectAuthError);\n\n  return (\n    <RegisterFormStyled>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched, isSubmitting, submitCount }) => {\n          const hasNameError = submitCount > 0 && touched.name && errors.name;\n          const hasEmailError =\n            submitCount > 0 && touched.email && errors.email;\n          const hasPasswordError =\n            submitCount > 0 && touched.password && errors.password;\n          const isFormSubmitted = submitCount > 0;\n\n          return (\n            <Form autoComplete=\"off\">\n              <Caption>Registration</Caption>\n              <FormFields>\n                <InputWraper>\n                  <BiUser\n                    className={`icon ${\n                      touched.name &&\n                      (hasNameError\n                        ? 'error-icon'\n                        : isFormSubmitted\n                        ? 'success-icon'\n                        : '')\n                    }`}\n                  />\n                  {hasNameError && <AiFillCloseCircle className=\"invalid\" />}\n                  {!hasNameError && isFormSubmitted && touched.name && (\n                    <AiFillCheckCircle className=\"valid\" />\n                  )}\n                  <Field\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    autoComplete=\"off\"\n                    className={`${\n                      touched.name &&\n                      (hasNameError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {hasNameError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"name\"\n                    />\n                  )}\n                </InputWraper>\n\n                <InputWraper>\n                  <HiOutlineMail\n                    className={`${\n                      touched.email &&\n                      (hasEmailError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {hasEmailError && <AiFillCloseCircle className=\"invalid\" />}\n                  {!hasEmailError && isFormSubmitted && touched.email && (\n                    <AiFillCheckCircle className=\"valid\" />\n                  )}\n                  <Field\n                    type=\"text\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    autoComplete=\"off\"\n                    className={`input-field ${\n                      touched.email &&\n                      (hasEmailError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {hasEmailError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"email\"\n                    />\n                  )}\n                </InputWraper>\n\n                <InputWraper>\n                  {hasPasswordError && (\n                    <AiFillCloseCircle className=\"invalid\" />\n                  )}\n                  {!hasPasswordError &&\n                    isFormSubmitted &&\n                    touched.password &&\n                    !isSubmitting && <AiFillCheckCircle className=\"valid\" />}\n                  <HiOutlineLockClosed\n                    className={`${\n                      touched.password &&\n                      (hasPasswordError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  <Field\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    autoComplete=\"off\"\n                    className={`input-field ${\n                      touched.password &&\n                      (hasPasswordError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {touched.password && !hasPasswordError && isFormSubmitted && (\n                    <div className=\"success-message\">Password is secure</div>\n                  )}\n                  {hasPasswordError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"password\"\n                    />\n                  )}\n                </InputWraper>\n              </FormFields>\n              <button type=\"submit\">Sign up</button>\n            </Form>\n          );\n        }}\n      </Formik>\n      {message && <Message>{message}</Message>}\n    </RegisterFormStyled>\n  );\n};\n\nexport default RegisterForm;\n","import { Link } from 'react-router-dom';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport RegisterWrapper from 'components/Styled/Register.styled.jsx';\n\nconst Register = () => {\n  return (\n    <RegisterWrapper>\n      <div className=\"wrapper\">\n        <RegisterForm />\n        <Link to={`/signin`}>Sign in</Link>\n      </div>\n    </RegisterWrapper>\n  );\n};\n\nexport default Register;\n","export const selectLogin = state => state.auth.isLoggedIn;\nexport const selectAuthError = state => state.auth.authError;\n"],"names":["MessageStyled","styled","colors","children","RegisterFormStyled","mediaSizes","Caption","FormFields","InputWraper","orderingTab","ordering","emailPattern","passwordPattern","dispatch","useDispatch","schema","yup","shape","name","min","max","required","email","matches","password","message","useSelector","selectAuthError","initialValues","validationSchema","onSubmit","values","resetForm","register","errors","touched","isSubmitting","submitCount","hasNameError","hasEmailError","hasPasswordError","isFormSubmitted","autoComplete","className","type","placeholder","component","Message","to","state","auth","authError"],"sourceRoot":""}