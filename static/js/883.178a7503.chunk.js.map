{"version":3,"file":"static/js/883.178a7503.chunk.js","mappings":"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","sources":["components/Message/Message.styled.jsx","components/Message/Message.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/Styled/Register.styled.jsx","components/patterns.js","components/LoginForm/LoginForm.jsx","pages/Login.jsx","redux/auth/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const MessageStyled = styled.div`\n  color: ${props => props.theme.constRedColor};\n  position: absolute;\n  font-size: 14px;\n  line-height: 21px;\n`;\n","import { MessageStyled } from './Message.styled';\n\nconst Message = ({ children }) => {\n  return (\n    <MessageStyled>\n      <p>{children} *</p>\n    </MessageStyled>\n  );\n};\n\nexport default Message;\n","import styled from '@emotion/styled';\nimport { mediaSizes } from '../constants';\n\nexport const RegisterFormStyled = styled.div`\n  background-color: ${props => props.theme.constDarkColor};\n  box-shadow: 0px 4px 48px rgba(0, 0, 0, 0.1);\n  border-radius: 30px;\n  padding: 32px 28px;\n  margin-bottom: 18px;\n  margin-inline: auto;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    padding: 44px 50px;\n    width: 500px;\n  }\n\n  & button {\n    cursor: pointer;\n    width: 100%;\n    font-size: 16px;\n    line-height: 18px;\n    background-color: ${props => props.theme.constantGreenColor};\n    border-radius: 6px;\n    height: 45px;\n    border: none;\n    color: ${props => props.theme.constWhiteColor};\n    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n      color: ${props => props.theme.constDarkColor};\n    }\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      height: 59px;\n    }\n  }\n`;\n\nexport const Caption = styled.p`\n  font-size: 24px;\n  line-height: 28px;\n  font-weight: 600;\n  letter-spacing: -0.02em;\n  color: ${props => props.theme.constWhiteColor};\n  margin-bottom: 32px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    font-size: 28px;\n    line-height: 30px;\n  }\n`;\n\nexport const FormFields = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  margin-bottom: 28px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    margin-bottom: 50px;\n  }\n`;\n\nexport const InputWraper = styled.div`\n  width: 100%;\n  position: relative;\n\n  & svg {\n    width: 18px;\n    height: 18px;\n    stroke: ${props => props.theme.constWhiteColor};\n    opacity: 0.6;\n    position: absolute;\n    top: 13px;\n    left: 14px;\n\n    &.error {\n      stroke: red;\n      opacity: 1;\n    }\n\n    &.success {\n      stroke: green;\n      opacity: 1;\n    }\n\n    &.icon {\n      fill: ${props => props.theme.constWhiteColor};\n\n      &.error-icon {\n        fill: red;\n        opacity: 1;\n      }\n\n      &.success-icon {\n        fill: green;\n        opacity: 1;\n      }\n    }\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      width: 24px;\n      height: 24px;\n      top: 16px;\n      left: 18px;\n    }\n  }\n\n  & div {\n    position: absolute;\n    font-size: 12px;\n    line-height: 21px;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      font-size: 14px;\n    }\n\n    &.error {\n      color: red;\n    }\n\n    &.success-message {\n      color: green;\n    }\n  }\n\n  & input {\n    border: 1px solid rgba(250, 250, 250, 0.2);\n    border-radius: 6px;\n    width: 100%;\n    height: 100%;\n    background-color: transparent;\n    padding: 12px 40px;\n    color: ${props => props.theme.constWhiteColor};\n    opacity: 0.8;\n\n    font-size: 16px;\n    font-weight: 400;\n    line-height: 21px;\n    letter-spacing: -0.02em;\n    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:focus {\n      border: 1px solid ${props => props.theme.constWhiteColor};\n    }\n\n    &.error {\n      border: 1px solid red;\n      opacity: 1;\n    }\n\n    &.success {\n      border: 1px solid green;\n      opacity: 1;\n    }\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      font-size: 18px;\n      line-height: 27px;\n      padding: 16px 50px;\n    }\n\n    &::placeholder {\n      font-weight: 400;\n      color: ${props => props.theme.constWhiteColor};\n\n      opacity: 0.8;\n    }\n\n    &:focus::-webkit-input-placeholder {\n      color: ${props => props.theme.placeholderAddRecipes};\n      opacity: 1;\n    }\n\n    &:hover,\n    placeholder {\n      stroke: ${props => props.theme.constWhiteColor};\n      fill: ${props => props.theme.constWhiteColor};\n      color: ${props => props.theme.constWhiteColor};\n      border-color: ${props => props.theme.constWhiteColor};\n      opacity: 1;\n    }\n  }\n\n  & .invalid,\n  .valid {\n    width: 18px;\n    height: 18px;\n    fill: red;\n    opacity: 1;\n    position: absolute;\n    top: 13px;\n    left: 216px;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      width: 24px;\n      height: 24px;\n      top: 16px;\n      left: 360px;\n    }\n  }\n\n  & .valid {\n    fill: green;\n  }\n`;\n","import styled from '@emotion/styled';\nimport ordering from 'components/images/login-register/ordering.png';\nimport orderingTab from 'components/images/login-register/orderingTab.png';\nimport rectangleMob from 'components/images/login-register/rectangle_mob1x.png';\n// import rectangleTab from 'components/images/login-register/rectangle_tab1x.png';\nimport rectangleDesk from 'components/images/login-register/rectangle_desc1x.png';\nimport { mediaSizes } from '../constants';\n\nconst RegisterWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${props => props.theme.constWhiteColor};\n  background-image: url(${orderingTab}), url(${rectangleMob});\n  background-repeat: no-repeat, no-repeat;\n  background-position: center 84px, center 282px;\n  background-size: 285px auto, cover;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-bottom: 100px;\n  padding-top: 305px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    background-position: center 98px, center 440px;\n    background-size: 409px auto, cover;\n\n    padding-top: 444px;\n  }\n\n  @media screen and (min-width: ${mediaSizes.desktop}) {\n    background-image: url(${ordering}), url(${rectangleDesk});\n    background-repeat: no-repeat, no-repeat;\n    background-position: 210px, center 400px;\n    background-size: 532px auto, cover;\n    padding-left: 760px;\n    height: 100vh;\n\n    display: flex;\n    flex-direction: column;\n    padding-block: 0;\n  }\n\n  & .wrapper {\n    @media screen and (min-width: ${mediaSizes.desktop}) {\n      margin-block: auto;\n    }\n  }\n\n  & a {\n    display: block;\n    color: ${props => props.theme.constWhiteColor};\n    font-size: 14px;\n    line-height: 21px;\n    text-decoration-line: underline;\n    text-align: center;\n    transition: all 200ms ease-in-out;\n\n    &:hover {\n      opacity: 0.7;\n    }\n  }\n`;\n\nexport default RegisterWrapper;\n","export const emailPattern = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/;\nexport const passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,16}$/;\n// /^\\w+([.-]?\\w+)@\\w+([.-]?\\w+)(.\\w{2,3})+$/;\n","import {\n  FormFields,\n  RegisterFormStyled,\n  Caption,\n  InputWraper,\n} from '../RegisterForm/RegisterForm.styled';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { HiOutlineMail, HiOutlineLockClosed } from 'react-icons/hi';\n\nimport { AiFillCloseCircle, AiFillCheckCircle } from 'react-icons/ai';\nimport * as yup from 'yup';\nimport { LogIn } from '../../redux/auth/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from 'components/Message/Message';\nimport { selectAuthError } from 'redux/auth/selectors';\nimport { emailPattern, passwordPattern } from 'components/patterns';\nimport { setAuthError } from 'redux/auth/slice';\nimport { useEffect } from 'react';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setAuthError(null));\n  }, [dispatch]);\n  const initialValues = { email: '', password: '' };\n\n  const schema = yup.object().shape({\n    email: yup\n      .string()\n      .email()\n      .matches(emailPattern, 'Email must be valid')\n      .min(3)\n      .max(30)\n      .required(),\n    password: yup\n      .string()\n      .matches(passwordPattern, 'The password must contain letters and numbers')\n      .required(),\n  });\n\n  const handleSubmit = values => {\n    dispatch(LogIn(values));\n  };\n\n  const message = useSelector(selectAuthError);\n  console.log(message);\n\n  return (\n    <RegisterFormStyled>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched, isSubmitting, submitCount }) => {\n          const hasEmailError =\n            submitCount > 0 && touched.email && errors.email;\n          const hasPasswordError =\n            submitCount > 0 && touched.password && errors.password;\n          const isFormSubmitted = submitCount > 0;\n\n          return (\n            <Form autoComplete=\"off\">\n              <Caption>Sign In</Caption>\n              <FormFields>\n                <InputWraper>\n                  <HiOutlineMail\n                    className={`${\n                      touched.email &&\n                      (hasEmailError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {hasEmailError && <AiFillCloseCircle className=\"invalid\" />}\n                  {!hasEmailError && isFormSubmitted && touched.email && (\n                    <AiFillCheckCircle className=\"valid\" />\n                  )}\n                  <Field\n                    type=\"text\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    autoComplete=\"off\"\n                    className={`input-field ${\n                      touched.email &&\n                      (hasEmailError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {hasEmailError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"email\"\n                    />\n                  )}\n                </InputWraper>\n\n                <InputWraper>\n                  {hasPasswordError && (\n                    <AiFillCloseCircle className=\"invalid\" />\n                  )}\n                  {!hasPasswordError &&\n                    isFormSubmitted &&\n                    touched.password &&\n                    !isSubmitting && <AiFillCheckCircle className=\"valid\" />}\n                  <HiOutlineLockClosed\n                    className={`${\n                      touched.password &&\n                      (hasPasswordError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  <Field\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    autoComplete=\"off\"\n                    className={`input-field ${\n                      touched.password &&\n                      (hasPasswordError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {touched.password && !hasPasswordError && isFormSubmitted && (\n                    <div className=\"success-message\">Password is secure</div>\n                  )}\n                  {hasPasswordError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"password\"\n                    />\n                  )}\n                </InputWraper>\n              </FormFields>\n              <button type=\"submibuttont\">Sign in</button>\n            </Form>\n          );\n        }}\n      </Formik>\n      {message && <Message>{message}</Message>}\n    </RegisterFormStyled>\n  );\n};\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport { Link } from 'react-router-dom';\nimport RegisterWrapper from 'components/Styled/Register.styled.jsx';\n\nconst Login = () => {\n  return (\n    <RegisterWrapper>\n      <div className=\"wrapper\">\n        <LoginForm />\n        <Link to={`/register`}>Registration</Link>\n      </div>\n    </RegisterWrapper>\n  );\n};\n\nexport default Login;\n","export const selectLogin = state => state.auth.isLoggedIn;\nexport const selectAuthError = state => state.auth.authError;\n"],"names":["MessageStyled","styled","props","theme","constRedColor","children","RegisterFormStyled","constDarkColor","mediaSizes","constantGreenColor","constWhiteColor","Caption","FormFields","InputWraper","placeholderAddRecipes","orderingTab","ordering","emailPattern","passwordPattern","dispatch","useDispatch","useEffect","setAuthError","schema","yup","shape","email","matches","min","max","required","password","message","useSelector","selectAuthError","console","log","initialValues","validationSchema","onSubmit","values","LogIn","errors","touched","isSubmitting","submitCount","hasEmailError","hasPasswordError","isFormSubmitted","autoComplete","className","type","name","placeholder","component","Message","to","state","auth","authError"],"sourceRoot":""}