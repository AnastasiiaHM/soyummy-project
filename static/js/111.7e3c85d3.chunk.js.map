{"version":3,"file":"static/js/111.7e3c85d3.chunk.js","mappings":"ySA6JA,EA1IyB,WACvB,IAAMA,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,IAAa,MACvB,GAAE,CAACH,IACJ,IAEMI,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJE,QACAC,QAAQC,EAAAA,EAAc,uBACtBC,IAAI,GACJC,IAAI,IACJC,WACHC,SAAUR,EAAAA,KAEPG,QAAQM,EAAAA,EAAiB,iDACzBF,aAOCG,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,GAG5B,OAFAC,QAAQC,IAAIJ,IAGV,UAAC,KAAD,YACE,SAAC,KAAD,CACEK,cA1BgB,CAAEb,MAAO,GAAIM,SAAU,IA2BvCQ,iBAAkBjB,EAClBkB,SAZe,SAAAC,GACnBvB,GAASwB,EAAAA,EAAAA,IAAMD,GAChB,EAOG,SAKG,YAAqD,IAAlDE,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAC3BC,EACJD,EAAc,GAAKF,EAAQnB,OAASkB,EAAOlB,MACvCuB,EACJF,EAAc,GAAKF,EAAQb,UAAYY,EAAOZ,SAC1CkB,EAAkBH,EAAc,EAEtC,OACE,UAAC,KAAD,CAAMI,aAAa,MAAnB,WACE,SAAC,KAAD,uBACA,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,MAAD,CACEC,UAAS,UACPP,EAAQnB,QACPsB,EACG,QACAE,EACA,UACA,OAGPF,IAAiB,SAAC,MAAD,CAAmBI,UAAU,aAC7CJ,GAAiBE,GAAmBL,EAAQnB,QAC5C,SAAC,MAAD,CAAmB0B,UAAU,WAE/B,SAAC,KAAD,CACEC,KAAK,OACLC,KAAK,QACLC,YAAY,QACZJ,aAAa,MACbC,UAAS,sBACPP,EAAQnB,QACPsB,EACG,QACAE,EACA,UACA,OAGPF,IACC,SAAC,KAAD,CACEI,UAAU,QACVI,UAAU,MACVF,KAAK,cAKX,UAAC,KAAD,WACGL,IACC,SAAC,MAAD,CAAmBG,UAAU,aAE7BH,GACAC,GACAL,EAAQb,WACPc,IAAgB,SAAC,MAAD,CAAmBM,UAAU,WAChD,SAAC,MAAD,CACEA,UAAS,UACPP,EAAQb,WACPiB,EACG,QACAC,EACA,UACA,QAGR,SAAC,KAAD,CACEG,KAAK,WACLC,KAAK,WACLC,YAAY,WACZJ,aAAa,MACbC,UAAS,sBACPP,EAAQb,WACPiB,EACG,QACAC,EACA,UACA,OAGPL,EAAQb,WAAaiB,GAAoBC,IACxC,gBAAKE,UAAU,kBAAf,gCAEDH,IACC,SAAC,KAAD,CACEG,UAAU,QACVI,UAAU,MACVF,KAAK,oBAKb,mBAAQD,KAAK,eAAb,uBAGL,IAEFnB,IAAW,SAACuB,EAAA,EAAD,UAAUvB,MAG3B,E,8BCzID,EAbc,WACZ,IAAMwB,GAASvB,EAAAA,EAAAA,KAAY,SAAAwB,GAAK,OAAIA,EAAMC,KAAKF,MAAf,IAChC,OACE,UAAC,IAAD,WACGA,IAAU,SAACG,EAAA,EAAD,KACX,iBAAKT,UAAU,UAAf,WACE,SAAC,EAAD,KACA,SAAC,KAAD,CAAMU,GAAE,YAAR,+BAIP,C","sources":["components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import {\n  FormFields,\n  RegisterFormStyled,\n  Caption,\n  InputWraper,\n} from '../RegisterForm/RegisterForm.styled';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { HiOutlineMail, HiOutlineLockClosed } from 'react-icons/hi';\n\nimport { AiFillCloseCircle, AiFillCheckCircle } from 'react-icons/ai';\nimport * as yup from 'yup';\nimport { LogIn } from '../../redux/auth/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from 'components/Message/Message';\nimport { selectAuthError } from 'redux/auth/selectors';\nimport { emailPattern, passwordPattern } from 'components/patterns';\nimport { setAuthError } from 'redux/auth/slice';\nimport { useEffect } from 'react';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setAuthError(null));\n  }, [dispatch]);\n  const initialValues = { email: '', password: '' };\n\n  const schema = yup.object().shape({\n    email: yup\n      .string()\n      .email()\n      .matches(emailPattern, 'Email must be valid')\n      .min(3)\n      .max(30)\n      .required(),\n    password: yup\n      .string()\n      .matches(passwordPattern, 'The password must contain letters and numbers')\n      .required(),\n  });\n\n  const handleSubmit = values => {\n    dispatch(LogIn(values));\n  };\n\n  const message = useSelector(selectAuthError);\n  console.log(message);\n\n  return (\n    <RegisterFormStyled>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched, isSubmitting, submitCount }) => {\n          const hasEmailError =\n            submitCount > 0 && touched.email && errors.email;\n          const hasPasswordError =\n            submitCount > 0 && touched.password && errors.password;\n          const isFormSubmitted = submitCount > 0;\n\n          return (\n            <Form autoComplete=\"off\">\n              <Caption>Sign In</Caption>\n              <FormFields>\n                <InputWraper>\n                  <HiOutlineMail\n                    className={`${\n                      touched.email &&\n                      (hasEmailError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {hasEmailError && <AiFillCloseCircle className=\"invalid\" />}\n                  {!hasEmailError && isFormSubmitted && touched.email && (\n                    <AiFillCheckCircle className=\"valid\" />\n                  )}\n                  <Field\n                    type=\"text\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    autoComplete=\"off\"\n                    className={`input-field ${\n                      touched.email &&\n                      (hasEmailError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {hasEmailError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"email\"\n                    />\n                  )}\n                </InputWraper>\n\n                <InputWraper>\n                  {hasPasswordError && (\n                    <AiFillCloseCircle className=\"invalid\" />\n                  )}\n                  {!hasPasswordError &&\n                    isFormSubmitted &&\n                    touched.password &&\n                    !isSubmitting && <AiFillCheckCircle className=\"valid\" />}\n                  <HiOutlineLockClosed\n                    className={`${\n                      touched.password &&\n                      (hasPasswordError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  <Field\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    autoComplete=\"off\"\n                    className={`input-field ${\n                      touched.password &&\n                      (hasPasswordError\n                        ? 'error'\n                        : isFormSubmitted\n                        ? 'success'\n                        : '')\n                    }`}\n                  />\n                  {touched.password && !hasPasswordError && isFormSubmitted && (\n                    <div className=\"success-message\">Password is secure</div>\n                  )}\n                  {hasPasswordError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"password\"\n                    />\n                  )}\n                </InputWraper>\n              </FormFields>\n              <button type=\"submibuttont\">Sign in</button>\n            </Form>\n          );\n        }}\n      </Formik>\n      {message && <Message>{message}</Message>}\n    </RegisterFormStyled>\n  );\n};\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport { Link } from 'react-router-dom';\nimport RegisterWrapper from 'components/Styled/Register.styled.jsx';\nimport { useSelector } from 'react-redux';\nimport { Motivation } from 'components/motivation/Motivation';\n\nconst Login = () => {\n  const isOpen = useSelector(state => state.auth.isOpen);\n  return (\n    <RegisterWrapper>\n      {isOpen && <Motivation />}\n      <div className=\"wrapper\">\n        <LoginForm />\n        <Link to={`/register`}>Registration</Link>\n      </div>\n    </RegisterWrapper>\n  );\n};\n\nexport default Login;\n"],"names":["dispatch","useDispatch","useEffect","setAuthError","schema","yup","shape","email","matches","emailPattern","min","max","required","password","passwordPattern","message","useSelector","selectAuthError","console","log","initialValues","validationSchema","onSubmit","values","LogIn","errors","touched","isSubmitting","submitCount","hasEmailError","hasPasswordError","isFormSubmitted","autoComplete","className","type","name","placeholder","component","Message","isOpen","state","auth","Motivation","to"],"sourceRoot":""}