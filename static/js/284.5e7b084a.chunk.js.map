{"version":3,"file":"static/js/284.5e7b084a.chunk.js","mappings":"iOAMaA,GAFgBC,EAAAA,EAAAA,KAAH,sBAEHA,EAAAA,EAAAA,EAAH,oWAUTC,EAAAA,EAAAA,OAGuBC,EAAAA,EAAAA,SAkBrBC,GAZQH,EAAAA,EAAAA,KAAH,sNASPC,EAAAA,EAAAA,QAGoBD,EAAAA,EAAAA,IAAH,wNAOME,EAAAA,EAAAA,Q,8FCxCrBE,EAAqBJ,EAAAA,EAAAA,OAAH,oKAUlBK,GAAWL,EAAAA,EAAAA,GAAOM,EAAAA,IAAPN,CAAH,mEAKRO,GAAWP,EAAAA,EAAAA,GAAOQ,EAAAA,IAAPR,CAAH,qE,SCLrB,EARqB,SAAC,GAA+B,IAA7BS,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAC/B,OACE,SAACN,EAAD,CAAoBO,KAAK,SAASC,QAASF,EAA3C,SACGD,GAAU,SAACJ,EAAD,KAAe,SAACE,EAAD,KAG/B,C,4KCRYM,EAAkBb,EAAAA,EAAAA,IAAH,8EACxBc,EAAAA,GAE8BZ,EAAAA,EAAAA,QAIrBa,EAAaf,EAAAA,EAAAA,IAAH,qHAGWE,EAAAA,EAAAA,Q,yFCArBc,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA0CC,EAAAA,EAAAA,WAAS,GAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KAEMC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAEtBC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJE,MAAM,+BACNC,IAAI,GACJC,IAAI,KACJC,SAAS,6BACZC,SAAUN,EAAAA,KAAaK,SAAS,kCAc5BE,GAAWC,EAAAA,EAAAA,MAOjB,OACE,UAACrB,EAAD,YACE,SAAC,KAAD,CACEsB,cArBgB,CAAEP,MAAO,GAAII,SAAU,IAsBvCI,iBAAkBX,EAClBY,SArBe,SAACC,EAAD,GAA2B,EAAhBC,UAC9BtB,GAASuB,EAAAA,EAAAA,IAAMF,GAEhB,EAeG,UAKE,UAAC,KAAD,CAAMG,aAAa,MAAnB,WACE,SAAC,KAAD,qBACA,UAAC1B,EAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEJ,KAAK,OACL+B,KAAK,QACLC,YAAY,IACZF,aAAa,SAEf,kBAAOG,QAAQ,QAAf,sBACA,SAAC,KAAD,CAAcC,UAAU,QAAQC,UAAU,MAAMJ,KAAK,cAGvD,UAAC,KAAD,YACE,SAAC,KAAD,CACE/B,KAAMS,EAAgB,OAAS,WAC/BsB,KAAK,WACLC,YAAY,IACZF,aAAa,SAEf,kBAAOG,QAAQ,WAAf,yBACA,SAACG,EAAA,EAAD,CACErC,aAzCS,WACrBW,GAAiB,SAAA2B,GAAK,OAAKA,CAAL,GACvB,EAwCavC,QAASW,KAEX,SAAC,KAAD,CAAcyB,UAAU,QAAQC,UAAU,MAAMJ,KAAK,oBAGzD,UAAC,KAAD,YACE,SAAC,IAAD,CAAQG,UAAU,sBAAsBlC,KAAK,SAA7C,qBAGA,SAAC,IAAD,CACEkC,UAAU,qBACVlC,KAAK,SACLC,QAjDQ,WAGlBqB,EAFa,YAGd,EA0CS,8BAULX,IAAW,SAAC2B,EAAA,EAAD,UAAU3B,MAG3B,ECrFD,EAXc,WACZ,IAAM4B,GAAa3B,EAAAA,EAAAA,IAAY4B,EAAAA,IAE/B,OACE,iCACE,SAACnC,EAAD,KACEkC,IAAc,SAACE,EAAA,EAAD,MAGrB,C","sources":["components/Form/Form.styled.jsx","components/ShowPassword/ShowPassword.styled.jsx","components/ShowPassword/ShowPassword.jsx","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { colors } from 'constants';\nimport { mediaSizes } from 'constants/media';\n\nexport const FormContainer = styled.form``;\n\nexport const Caption = styled.p`\n  margin: 0;\n  margin-top: 40px;\n  margin-bottom: 55px;\n  margin-right: auto;\n  text-transform: uppercase;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1.2;\n  letter-spacing: 0.04em;\n  color: ${colors.color1};\n  text-align: center;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    margin-top: 160px;\n    text-align: left;\n  }\n`;\n\nexport const Label = styled.span`\n  position: relative;\n  margin: 0;\n  margin-right: auto;\n  font-family: 'Verdana';\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1.2;\n  letter-spacing: 0.04em;\n  color: ${colors.color2};\n`;\n\nexport const ButtonContainer = styled.div`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    flex-direction: row;\n    gap: 32px;\n  }\n`;\n","import styled from '@emotion/styled';\nimport { BsFillEyeFill } from 'react-icons/bs';\nimport { BsFillEyeSlashFill } from 'react-icons/bs';\n\nexport const ShowPasswordButton = styled.button`\n  position: absolute;\n  top: 19px;\n  right: 5px;\n  border: none;\n  background-color: transparent;\n  padding: 5px;\n  cursor: pointer;\n`;\n\nexport const ShowIcon = styled(BsFillEyeFill)`\n  width: 18px;\n  fill: rgba(0, 0, 0, 1);\n`;\n\nexport const HideIcon = styled(BsFillEyeSlashFill)`\n  width: 18px;\n  fill: rgba(0, 0, 0, 0.3);\n`;\n","import {\n  ShowPasswordButton,\n  ShowIcon,\n  HideIcon,\n} from './ShowPassword.styled.jsx';\n\nconst ShowPassword = ({ isShown, clickHandler }) => {\n  return (\n    <ShowPasswordButton type=\"button\" onClick={clickHandler}>\n      {isShown ? <ShowIcon /> : <HideIcon />}\n    </ShowPasswordButton>\n  );\n};\n\nexport default ShowPassword;\n","import styled from '@emotion/styled';\nimport { mediaSizes } from 'constants/media';\nimport { container } from 'helpers';\n\nexport const LoginFormStyled = styled.div`\n  ${container};\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n  }\n`;\n\nexport const FormFields = styled.div`\n  margin-bottom: 60px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    max-width: 240px;\n  }\n`;\n","import { Caption, ButtonContainer } from 'components/Form/Form.styled';\nimport { InputWraper } from 'components/Form/Input.styled';\nimport { Button } from 'components/Styled';\nimport { useNavigate } from 'react-router-dom';\nimport { FormFields, LoginFormStyled } from './LoginForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logIn } from 'redux/user/operations';\nimport Message from 'components/Message/Message';\nimport ShowPassword from 'components/ShowPassword/ShowPassword';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useState } from 'react';\nimport { selectAuthError } from 'redux/user/selectors';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const [passwordShown, setPasswordShown] = useState(false);\n\n  const message = useSelector(selectAuthError);\n\n  const schema = yup.object().shape({\n    email: yup\n      .string()\n      .email('Email must be a valid email')\n      .min(3)\n      .max(254)\n      .required('Email is a required field'),\n    password: yup.string().required('Password is a required field'),\n  });\n\n  const initialValues = { email: '', password: '' };\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values));\n    //if (!message) resetForm();\n  };\n\n  const onClickHandler = () => {\n    setPasswordShown(state => !state);\n  };\n\n  const navigate = useNavigate();\n  const redirection = () => {\n    const path = '/register';\n\n    navigate(path);\n  };\n\n  return (\n    <LoginFormStyled>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <Caption>Login</Caption>\n          <FormFields>\n            <InputWraper>\n              <Field\n                type=\"text\"\n                name=\"email\"\n                placeholder=\" \"\n                autoComplete=\"off\"\n              />\n              <label htmlFor=\"email\">Email *</label>\n              <ErrorMessage className=\"error\" component=\"div\" name=\"email\" />\n            </InputWraper>\n\n            <InputWraper>\n              <Field\n                type={passwordShown ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\" \"\n                autoComplete=\"off\"\n              />\n              <label htmlFor=\"password\">Password *</label>\n              <ShowPassword\n                clickHandler={onClickHandler}\n                isShown={passwordShown}\n              />\n              <ErrorMessage className=\"error\" component=\"div\" name=\"password\" />\n            </InputWraper>\n          </FormFields>\n          <ButtonContainer>\n            <Button className=\"orange regLogbutton\" type=\"submit\">\n              Log In\n            </Button>\n            <Button\n              className=\"white regLogbutton\"\n              type=\"button\"\n              onClick={redirection}\n            >\n              Register\n            </Button>\n          </ButtonContainer>\n        </Form>\n      </Formik>\n      {message && <Message>{message}</Message>}\n    </LoginFormStyled>\n  );\n};\n","import { Background } from 'components/Background/Background';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from 'redux/user/selectors';\n\nconst Login = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  return (\n    <>\n      <LoginForm />\n      {!isLoggedIn && <Background />}\n    </>\n  );\n};\n\nexport default Login;\n"],"names":["Caption","styled","colors","mediaSizes","ButtonContainer","ShowPasswordButton","ShowIcon","BsFillEyeFill","HideIcon","BsFillEyeSlashFill","isShown","clickHandler","type","onClick","LoginFormStyled","container","FormFields","LoginForm","dispatch","useDispatch","useState","passwordShown","setPasswordShown","message","useSelector","selectAuthError","schema","yup","shape","email","min","max","required","password","navigate","useNavigate","initialValues","validationSchema","onSubmit","values","resetForm","logIn","autoComplete","name","placeholder","htmlFor","className","component","ShowPassword","state","Message","isLoggedIn","selectIsLoggedIn","Background"],"sourceRoot":""}